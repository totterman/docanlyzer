{
  "title": "Flerspråkig investeringsassistent",
  "error": "Ett systemfel har inträffat:",
  "home2": "Utöver inloggning, är frontändan flerspråkig. Det går att välja mellan svenska, finska och engelska i demot. Inloggning kan provas med:",
  "home3": "Frontändan är utförd med React och Typescript, och utseendet med hjälp av Tailwind CSS. Av React Hooks används bla useContext, useEffect, useLoaderData och useReducer. Stil-funktionerna Pagestyle, Warningstyle och Sectionstyle minskar på behovet att upprepa HTML-kod.",
  "explain": "Förklara",
  "instructions": "Instruktioner",
  "instruction1": "Fråga assistanten om årsrapport 2023 för bolagen:",
  "instruction2": "Aker, DnB, Huhtamäki, Nokia, Sandvik, Sanoma, Scania, Skanska, Telenor, UPM, Volvo, Yara.",
  "instruction3": "Assistenten förstår tillsvidare bara engelska.",
  "instruction4": "En bra fråga:",
  "instruction5": "\"What are the main strategic goals of Sanoma?\"",
  "instruction6": "VARNING: Den här appen är endast avsedd som demonstration. Lita INTE på svaren på något sätt!",
  "question": "Fråga:",
  "send": "Sänd",
  "clear": "Töm",
  "ex1q": "Vad är syftet med denna webapp?",
  "ex1a": "Demonstrera hur icke-publikt information kan användas i en AI-applikation. Metoden kallas Retrieval Augmented Generation, där nya dokument införs i AI-språkmodellens kunskapsbas för att förbättra kvaliteten på svaren. Metoden är mycket snabbare och billigare än att finjustera en existerande språkmodell, eller att lära upp en ny språkmodell.",
  "ex2q": "Vilken AI/LLM/modell/vadförnågonting använder du?",
  "ex2a": "Utvecklingen gjordes med Ollama som kördes i en Docker-container. Som modeller användes Mistral till chat och nomic-embed-text för embedding. Denna instans körs i Azure Spring Apps, och använder Azure OpenAI med GPT 3.5 Turbo 4k -modellen.",
  "ex3q": "Ett ögonblick! Menar du att en AI-språkmodell kan köras... på våra egna datorer på kontoret?",
  "ex3a": "Javisst! Bra (= dyr) hårdvara förbättrar förstås användarens upplevelse. Men grundtanken är att du kan köra din AI-infrastruktur helt inom ditt egna säkra nätverk. Du behöver alltså inte sända sensitiv information på allmäna nätverk.",
  "ex4q": "Och resten av tekniken? Behöver vi flera datavetenskapare?",
  "ex4a": "De skulle säkert kunna förbättra kvaliteten på svaren! Den här applikationen är däremot ihopsatt av vanliga enterprise-Java komponenter. Den består av ett React-användargränssnitt och en Spring Boot -server, inget mer invecklat. Det borde gå rätt så enkelt att förena med dina nuvarande företgassystem, i synnerhet om ni redan använder Java/Spring/JavaScript.",
  "ex5q": "Varför årsrapporter?",
  "ex5a": "För den här demonstrationen behövs det nytt datamaterial, som inte kan finnas i en befintlig språkmodell. De här årsrapporterna är ganska färska och är hämtade direkt från respektive företagets hemsidor.",
  "ex6q": "Har du någon anknytning till företagen ifråga?",
  "ex6a": "Nej. Absolut inte. Företagen valdes för att de är rätt kända, och årsrapporterna fanns lätt tillgängliga.",
  "ex7q": "Jag märker att assistenten ibland ger tvivelaktiga eller helt felaktiga svar. Vad beror det på?",
  "ex7a": "I årsrapporterna finns de viktigaste uppgifterna ofta i tabeller. I en PDF-fil kan tabellerna var struktureda på väldigt varierande sätt, vilket blir väldigt krävande för programmet som läser in filerna. Detta är den största orsaken till felaktiga svar.",
  "ex8q": "Finns det hopp om förbättring?",
  "ex8a": "Det finns. Programbiblioteken utvecklas i snabb takt, och nya metoder blir tillgängliga.",
  "ex9q": "Tänker du vidareutveckla applikationen?",
  "ex9a": "Jo. Som exempel, för att förbättra tillförlitligheten på svaren, kunde den bakomliggande grafdatabasen utnyttjas bättre. Datanmaterialet, i vilken form den än kommer, kunde med AI-assistens ordnas i en taxonomi, som grafdatabasen kunde återge.",
  "ex10q": "Häftigt! Hur får vi tag på dig?",
  "ex10a1": "Skicka mejl till ",
  "ex10a2": " för snabb respons. Dock anser jag som självföretagare att det inte är praktiskt att ständigt vara uppkopplad.",
  "ttHomepage": "Till hemsida",
  "ttClear": "Rensa chatthistoriken",
  "schema": "Schema",
  "scA": "Systemschema",
  "scB": "Du använder produktionsinstansen av appen. Den körs i en container på Azure Spring Apps. Azure OpenAI används som LLM och Neo4j AURA DB som grafdatabas. Båda dessa är molnbaserade tjänster för att undvika kostnaderna för att köra fler Azure-containrar.",
  "scC": "Utvecklingen körs på en Linux-arbetsstation med 32 GB RAM och en GPU. En Spring Boot-app läser PDF-filer och skickar deras innehåll till nlp-ingestor för parsning i JSON-block, som Spring Boot-appen organiserar i en trädstruktur. Under utveckling körs både neo4j-databasen och Ollama LLM i Docker-containrar.",
  "sc1": "En samling PDF-dokument bearbetas av Spring Boot-appen och skickas till nlp-ingestor.",
  "sc2": "nlp-ingestor körs i en Docker-container. Den tar emot en PDF-fil och tolkar innehållet i JSON-block. JSON-blocken taggas som rubriker, tabeller, tabellrader osv.",
  "sc3": "Spring Boot-appen tar emot JSON-blocken och skapar en trädstruktur från dem, vilket återspeglar den ursprungliga PDF-dokumentstrukturen.",
  "sc4": "Spring Boot-appen läser in trädstrukturerade dokumentblock i neo4j-databasen. Blocktyper mappas som entiteter och deras relationer följer trädstrukturen.",
  "sc5": "Inbäddningar från dokumentets textblock skapas med hjälp av en LLM-inbäddningsmodell. Inbäddningarna lagras i neo4j-databasen. Relationer från inbäddningarna till deras ursprungliga textblock lagras också i neo4j.",
  "sc6": "Användare (= du) kan ställa frågor till systemet via detta React-användargränssnitt. Frågan matas till AI-systemet, som söker de mest likartade textblocken från neo4j-databasen.",
  "sc7": "Utgående från de mest likartade textbitarna formulerar LLM ett svar på frågan och returnerar det till användaren.",
  "scD": "Elementstruktur för grafdatabas",
  "scE": "Strukturen för neo4j-databasen. Ett dokument (Document) består av avsnitt (Section), som kan innehålla textsegment (Chunk) eller tabeller (Table). Med andra ord tillhör Avsnitt Dokument, eller (underavsnitt) till Avsnitt på högre nivå. Textsegment och tabeller hör under avsnitt, och har inbäddningar (Embedding) som konstruerats utifrån deras textinnehåll.",
  "scF": "Tack",
  "scG": "Joshua Yu och Ambit Shukla gjorde grundläggande arbete och publicerade det på GitHub.",
  "scH": ""
}
